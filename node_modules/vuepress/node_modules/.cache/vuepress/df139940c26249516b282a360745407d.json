{"remainingRequest":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/cache-loader/dist/cjs.js??ref--3-0!/Users/mypro/history/gitpro/hxl888.github.io/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/Users/mypro/history/gitpro/hxl888.github.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/mypro/history/gitpro/hxl888.github.io/docs/pages/javascript/es6.md?vue&type=template&id=3c2ca1cc","dependencies":[{"path":"/Users/mypro/history/gitpro/hxl888.github.io/docs/pages/javascript/es6.md","mtime":1723100283626},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1723084153564},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1723084153564},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/babel-loader/lib/index.js","mtime":1723084153686},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1718962895631},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1723084153564},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vue-loader/lib/index.js","mtime":1718962895631},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1723084153489}],"contextDependencies":[],"result":["var render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c('div', {\n    staticClass: \"content\"\n  }, [_vm._ssrNode(\"<h1 id=\\\"es6\\\"><a href=\\\"#es6\\\" class=\\\"header-anchor\\\">#</a> es6</h1><p>1.判断两个值是否相等(es6语法)：</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>Object.is(NAN, NAN); // true\\nObject.is(+0, -0 ); // false\\n+0 === -0; // true\\n</code></pre></div><p>2.es6 ``特殊用法：</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>let a = '哈哈';\\nlet b = '呵呵';\\n let c = func`你说${a}我说${b}！！`;\\n func(strings, values) {\\n     console.log(strings); // 你说 我说   ！！！\\n     console.log(values); // 哈哈 呵呵\\n }\\n</code></pre></div><p>3.Object.setPrototypeOf  和  <strong>proto</strong></p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>let dinner = {\\n    getDrink() {\\n        return '喝酒';\\n    }\\n};\\nlet breakfast = {\\n    getDrink() {\\n        return '喝水吧还是';\\n    }\\n};\\nlet sunday = Object.create(dinner);\\nconsole.log(Object.getPrototypeOf(sunday) === dinner); // true\\nObject.setPrototypeOf(sunday, breakfast);\\nconsole.log(Object.getPrototypeOf(sunday) === breakfast) // true\\n---------------------\\nlet sundays = {\\n    __proto__: breakfast\\n};\\nconsole.log(sundays.getDrink()); // 喝水吧还是\\nconsole.log(Object.getPrototypeOf(sundays) === breakfast) // true\\n\\nsundays.__proto__ = dinner;\\nconsole.log(sundays.getDrink()); // 喝酒\\nconsole.log(Object.getPrototypeOf(sundays) === dinner) // true\\n\\n---------------------\\nlet sundayss = {\\n    __proto__: breakfast,\\n    getDrink() {\\n        return super.getDrink() + '我是新来的!!';\\n    }\\n};\\nconsole.log(sundayss.getDrink()); // 喝水吧还是 我是新来的!!\\n\\n</code></pre></div><p>4.iterators 迭代器</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>function chef(foods) {\\n    let i = 0;\\n    return {\\n        next() {\\n            let done = (i &gt;= foods.length);\\n            let value = !done ? foods[i++] : undefined;\\n            return {\\n                value: value,\\n                done: done\\n            }\\n        }\\n    }\\n};\\nlet examples = chef(['a', 'b']);\\nconsole.log(examples.next()); // value: 'a' done: false\\nconsole.log(examples.next()); // value: 'b' done: false\\nconsole.log(examples.next()); // value: undifined done: true\\n</code></pre></div><p>5.generators生成器</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>function* chef() {\\n    yield 'a'\\n    yield 'b'\\n};\\nlet chefs = chef();\\nconsole.log(chefs.next()); // value: 'a' done: false\\nconsole.log(chefs.next()); // value: 'b' done: false\\nconsole.log(chefs.next()); // value: undefined done: true\\n</code></pre></div><p>6.class 类</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>class Chef {\\n    // 初始化用\\n    constructor(food) { \\n        this.food = food;\\n        this.dish = [];\\n    }\\n    // 1****\\n    get menu() {\\n        return this.dish;\\n    }\\n    set menu(dish) {\\n        this.dish.push(dish);\\n    }\\n    // 2***\\n    cook() {\\n        console.log(this.food);\\n    }\\n    \\n    // 3****静态方法static\\n    static drink(foods) {\\n        console.log(foods);\\n    }\\n};\\nlet chefs = new Chef('苹果');\\nchefs.cook();\\nchefs.menu = '橘子';\\nchefs.menu = '香蕉';\\nconsole.log(chefs.menu); // [&quot;橘子&quot;, &quot;香蕉&quot;]\\n\\n// 调取静态方法不需要实例化方法\\nChef.drink('我不需要new实例化哈哈！！');\\n\\n</code></pre></div><p>7.class 的继承</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>class Person {\\n    constructor(name, birthday) {\\n        this.name = name;\\n        this.birthday = birthday;\\n    }\\n    intro() {\\n        return `${this.name}, ${this.birthday}`;\\n    }\\n};\\n\\nclass Chef extends Person {\\n    constructor(name, birthday) {\\n        super(name, birthday);\\n    }\\n};\\n\\nlet example = new Chef('我啊', '666');\\nexample.intro(); // &quot;我啊, 666&quot;\\n\\n</code></pre></div><p>8.set</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>let desserts = new Set('abc');\\ndesserts.add('d');\\nconsole.log(desserts);\\n\\n// 长度\\nconsole.log(desserts.size);\\n\\n// 判断是否存在\\nconsole.log(desserts.has('a'));\\n\\n// 删除单个数据\\ndesserts.delete('d');\\nconsole.log(desserts);\\n\\n// 清空所有数据\\ndesserts.clear();\\nconsole.log(desserts);\\n</code></pre></div><p>9.Map</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>let food = new Map();\\nlet fruit = {}, cook = function() {}, dessert = '甜点';\\n\\nfood.set(fruit, '香蕉');\\nfood.set(cook, '苹果');\\nfood.set(dessert, '菠萝');\\n\\nconsole.log(food);\\nconsole.log(food.size);\\nconsole.log(food.get(fruit));\\nconsole.log(food.get(cook));\\nfood.delete(dessert);\\nconsole.log(food.has(dessert));\\n\\nfood.forEach((value, key) =&gt; {\\n    console.log(`${key}= ${value}`);\\n});\\n</code></pre></div><p>10.export 导出的几中方法</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>    function dinner(name) {\\n        console.log(name);\\n    };\\n1. \\n    export default function dinner(name) {\\n        console.log(name);\\n    };\\n    \\n2. \\n    export default dinner;\\n    \\n3. \\n    export {dinner as default}; \\n    \\n4. \\n    export {dinner};\\n</code></pre></div>\")]);\n};\n\nvar staticRenderFns = [];\nexport { render, staticRenderFns };",{"version":3,"sources":["docs/pages/javascript/es6.md"],"names":["render","_vm","_c","_self","staticClass","_ssrNode","staticRenderFns"],"mappings":"AAAA,IAAIA,SAAS,SAASA,MAAT,GAAiB;AAAC,MAAIC,MAAI,IAAR;AAAA,MAAaC,KAAGD,IAAIE,KAAJ,CAAUD,EAA1B;;AAA6B,SAAOA,GAAG,KAAH,EAAS;AAACE,iBAAY;AAAb,GAAT,EAAiC,CAACH,IAAII,QAAJ,CAAa,24JAAb,CAAD,CAAjC,CAAP;AAC3D,CADD;;AAEA,IAAIC,kBAAkB,EAAtB;AAEA,SAASN,MAAT,EAAiBM,eAAjB","sourceRoot":"/Users/mypro/history/gitpro/hxl888.github.io","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"es6\\\"><a href=\\\"#es6\\\" class=\\\"header-anchor\\\">#</a> es6</h1><p>1.判断两个值是否相等(es6语法)：</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>Object.is(NAN, NAN); // true\\nObject.is(+0, -0 ); // false\\n+0 === -0; // true\\n</code></pre></div><p>2.es6 ``特殊用法：</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>let a = '哈哈';\\nlet b = '呵呵';\\n let c = func`你说${a}我说${b}！！`;\\n func(strings, values) {\\n     console.log(strings); // 你说 我说   ！！！\\n     console.log(values); // 哈哈 呵呵\\n }\\n</code></pre></div><p>3.Object.setPrototypeOf  和  <strong>proto</strong></p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>let dinner = {\\n    getDrink() {\\n        return '喝酒';\\n    }\\n};\\nlet breakfast = {\\n    getDrink() {\\n        return '喝水吧还是';\\n    }\\n};\\nlet sunday = Object.create(dinner);\\nconsole.log(Object.getPrototypeOf(sunday) === dinner); // true\\nObject.setPrototypeOf(sunday, breakfast);\\nconsole.log(Object.getPrototypeOf(sunday) === breakfast) // true\\n---------------------\\nlet sundays = {\\n    __proto__: breakfast\\n};\\nconsole.log(sundays.getDrink()); // 喝水吧还是\\nconsole.log(Object.getPrototypeOf(sundays) === breakfast) // true\\n\\nsundays.__proto__ = dinner;\\nconsole.log(sundays.getDrink()); // 喝酒\\nconsole.log(Object.getPrototypeOf(sundays) === dinner) // true\\n\\n---------------------\\nlet sundayss = {\\n    __proto__: breakfast,\\n    getDrink() {\\n        return super.getDrink() + '我是新来的!!';\\n    }\\n};\\nconsole.log(sundayss.getDrink()); // 喝水吧还是 我是新来的!!\\n\\n</code></pre></div><p>4.iterators 迭代器</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>function chef(foods) {\\n    let i = 0;\\n    return {\\n        next() {\\n            let done = (i &gt;= foods.length);\\n            let value = !done ? foods[i++] : undefined;\\n            return {\\n                value: value,\\n                done: done\\n            }\\n        }\\n    }\\n};\\nlet examples = chef(['a', 'b']);\\nconsole.log(examples.next()); // value: 'a' done: false\\nconsole.log(examples.next()); // value: 'b' done: false\\nconsole.log(examples.next()); // value: undifined done: true\\n</code></pre></div><p>5.generators生成器</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>function* chef() {\\n    yield 'a'\\n    yield 'b'\\n};\\nlet chefs = chef();\\nconsole.log(chefs.next()); // value: 'a' done: false\\nconsole.log(chefs.next()); // value: 'b' done: false\\nconsole.log(chefs.next()); // value: undefined done: true\\n</code></pre></div><p>6.class 类</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>class Chef {\\n    // 初始化用\\n    constructor(food) { \\n        this.food = food;\\n        this.dish = [];\\n    }\\n    // 1****\\n    get menu() {\\n        return this.dish;\\n    }\\n    set menu(dish) {\\n        this.dish.push(dish);\\n    }\\n    // 2***\\n    cook() {\\n        console.log(this.food);\\n    }\\n    \\n    // 3****静态方法static\\n    static drink(foods) {\\n        console.log(foods);\\n    }\\n};\\nlet chefs = new Chef('苹果');\\nchefs.cook();\\nchefs.menu = '橘子';\\nchefs.menu = '香蕉';\\nconsole.log(chefs.menu); // [&quot;橘子&quot;, &quot;香蕉&quot;]\\n\\n// 调取静态方法不需要实例化方法\\nChef.drink('我不需要new实例化哈哈！！');\\n\\n</code></pre></div><p>7.class 的继承</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>class Person {\\n    constructor(name, birthday) {\\n        this.name = name;\\n        this.birthday = birthday;\\n    }\\n    intro() {\\n        return `${this.name}, ${this.birthday}`;\\n    }\\n};\\n\\nclass Chef extends Person {\\n    constructor(name, birthday) {\\n        super(name, birthday);\\n    }\\n};\\n\\nlet example = new Chef('我啊', '666');\\nexample.intro(); // &quot;我啊, 666&quot;\\n\\n</code></pre></div><p>8.set</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>let desserts = new Set('abc');\\ndesserts.add('d');\\nconsole.log(desserts);\\n\\n// 长度\\nconsole.log(desserts.size);\\n\\n// 判断是否存在\\nconsole.log(desserts.has('a'));\\n\\n// 删除单个数据\\ndesserts.delete('d');\\nconsole.log(desserts);\\n\\n// 清空所有数据\\ndesserts.clear();\\nconsole.log(desserts);\\n</code></pre></div><p>9.Map</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>let food = new Map();\\nlet fruit = {}, cook = function() {}, dessert = '甜点';\\n\\nfood.set(fruit, '香蕉');\\nfood.set(cook, '苹果');\\nfood.set(dessert, '菠萝');\\n\\nconsole.log(food);\\nconsole.log(food.size);\\nconsole.log(food.get(fruit));\\nconsole.log(food.get(cook));\\nfood.delete(dessert);\\nconsole.log(food.has(dessert));\\n\\nfood.forEach((value, key) =&gt; {\\n    console.log(`${key}= ${value}`);\\n});\\n</code></pre></div><p>10.export 导出的几中方法</p><div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>    function dinner(name) {\\n        console.log(name);\\n    };\\n1. \\n    export default function dinner(name) {\\n        console.log(name);\\n    };\\n    \\n2. \\n    export default dinner;\\n    \\n3. \\n    export {dinner as default}; \\n    \\n4. \\n    export {dinner};\\n</code></pre></div>\")])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}]}