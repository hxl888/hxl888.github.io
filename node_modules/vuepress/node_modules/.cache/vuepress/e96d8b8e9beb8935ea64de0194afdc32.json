{"remainingRequest":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/mypro/history/gitpro/hxl888.github.io/docs/pages/backstage/node.md?vue&type=template&id=062e0702","dependencies":[{"path":"/Users/mypro/history/gitpro/hxl888.github.io/docs/pages/backstage/node.md","mtime":1723100283623},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1723084153564},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1723084153564},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/babel-loader/lib/index.js","mtime":1723084153686},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1718962895631},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1723084153564},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vue-loader/lib/index.js","mtime":1718962895631},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1723084153489}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"nodejs笔记\"><a class=\"header-anchor\" href=\"#nodejs笔记\">#</a> nodejs笔记</h1>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>const express = require(&#39;express&#39;);\nconst bodyParser = require(&#39;body-parser&#39;); // 中间件（只能解析普通的post数据不能解析上传文件数据）\nget - 无需中间件\nreq.query\npost - 需要body-parser\nserver.use(bodyParser.urlencoded({\n    extended: false, // 扩展模式\n    limit: 2*1024 // 限制2M\n}));\nserver.use(function(req, res){\n    console.log(res.body);\n});\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"链式操作\"><a class=\"header-anchor\" href=\"#链式操作\">#</a> 链式操作</h3>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>server.use(&#39;/&#39;, function(req,res,next){\n    console.log(a);\n    next();\n})\nserver.use(&#39;/&#39;, function(req,res,next){\n    console.log(b);\n})\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>server.use(function(req, res, next){\n    req.body = { };\n })\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"cookie-cookie-session\"><a class=\"header-anchor\" href=\"#cookie-cookie-session\">#</a> cookie / cookie-session</h3>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>// cookie\nconst cookieParser = require(&#39;cookie-parser&#39;);\nserver.use(cookieParser(&#39;sfjlfjls3&#39;)); // 签名\nserver.uer(&#39;/&#39;, function(){\n    req.secret=&#39;sfjlfjls3&#39;; // 后台签名 cookieParser(&#39;sfjlfjls3&#39;)写完之后此处可以不写\n    res.cookie(&#39;user&#39;, &#39;blue&#39;, {signed: true, path: &#39;&#39;, maxAge: &#39;&#39;}); // 签名\n    \n    res.clearCookie(&#39;user&#39;); // 删除cookie\n    console.log(&#39;无签名cookie&#39;, req.cookies); \n    console.log(&#39;签名cookie&#39;, req.singnedCookies);\n    res.send(&#39;ok&#39;);\n});\nserver.listen(8080);\n\ncookie加密 cookie-encrypter \n\n// cookie-session 存在于服务器 不能独立存在，基于cookie\nconst cookieParser = require(&#39;cookie-parser&#39;);\nconst cookieSession = require(&#39;cookie-session&#39;);\nserver.use(cookieParser());\nserver.use(cookieSession({\n    name: &#39;sess&#39;, // 名字随便定义\n    keys: [&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;]，// 数组越长越安全\n    maxAge: 2*3600*1000 // 例如两个小时\n}));\nserver.uer(&#39;/&#39;, function(){\n    if (req.sesion[&#39;count&#39; == nll]) {\n        req.session[&#39;count&#39;] = 1;\n    } else {\n        req.session[&#39;count&#39;]++;\n    }\n    delete req.session[&#39;count&#39;]; // 删除session\n    console.log(req.session[&#39;count&#39;]);\n    console.log(req.session);\n    res.send(&#39;ok&#39;); \n});\n\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"nodejs模板引擎\"><a class=\"header-anchor\" href=\"#nodejs模板引擎\">#</a> nodejs模板引擎</h3>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>两个主流模板：\njade - 破坏式、侵入式、强依赖\nejs  - 温和非侵入式、若依赖\n\n\n=============jade=================\n可以识别单双标签！\n1.根据缩进规定层级；\n2.属性放在括号里逗号分隔: \n       例如:script(src=&#39;a.js&#39;) \n            link(href=&#39;a.css&#39;, ref=&#39;&#39;)\n            input(type=&#39;text&#39;, id =&#39;&#39;, value=&#39;&#39;)\n            a(href=&#39;www.baidu.com&#39;) 链接名\n            \n3.内联样式: div(style=&#39;width:200px;height:100px&#39;) 或\n            div(style={width: &#39;200px&#39;, height: &#39;100px&#39;}) // json只试用style属性的才能用json\n            \n4.class名:  div(class=&#39;aa bb cc&#39;)或\n            div(class=[&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;])\n            div.class\n            ***title不能用数组***\n            \n5.id名:     div#id\n            div&amp;attributes({title: &#39;&#39;, id: &#39;&#39;}); // 加上&#39;&amp;\n            &#39;符号才可以用json写上title\n             \n\nconst jade = require(&#39;jade&#39;);\n // var str = jade.render(&#39;html&#39;);\n var str = jade.renderFile(&#39;./view/1.jade&#39;, {pretty: true});\n // pretty 美化输入的html\nconsole.log(str);\n\n=============ejs=================\nconst ejs = require(&#39;ejs&#39;);\nejs.renderFile(&#39;./view/1.ejs&#39;, {}, function(err, data){\n    if (err) {\n        console.log(&#39;编译失败&#39;);\n    } else {\n        console.log(data);\n    }\n});\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"ejs\"><a class=\"header-anchor\" href=\"#ejs\">#</a> ejs</h3>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>const ejs = require(&#39;ejs&#39;);\nejs.renderFile(&#39;.view/1.ejs&#39;,{}, function(err, data){\n    console.log(data);\n})\nejs模板输入形式\n&lt;%= 变量名 吧%&gt;\n&lt;%  var str = &#39;&lt;div&gt;&lt;/div&gt;&#39;; %&gt;\n\n&lt;%- str %&gt; // &#39;-&#39;号为不转义输入 ；&#39;=&#39;为为转义输入；\n&lt;% include ./a.txt %&gt; // 引入文件\n\n=====include写法====\n\n&lt;% if(type == &#39;admin&#39;) {%&gt;\n&lt;% include ../style/admin.css %&gt;\n&lt;%} else {%&gt;\n&lt;% include ../style/user.css %&gt;\n&lt;% } %&gt;\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"实践区\"><a class=\"header-anchor\" href=\"#实践区\">#</a> 实践区</h3>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>enctype=&#39;multipart/form-data&#39; // 处理文件上传用的\n&lt;form enctype=&#39;multipart/form-data&#39; methods=&#39;post&#39;&gt;\n    &lt;input type=&#39;file&#39; /&gt;\n&lt;/form&gt;\n\n需要用到npm模块 multer(处理multipart/form-data表单)!\n\nconst pathLib = require(&#39;path&#39;);\nconst bodyParser = require(&#39;body-parser&#39;);\ncosnt fs = require(&#39;fs&#39;);\nconst multer = require(&#39;multer&#39;); // 解析post文件\n\n\nserver.use(multer({dest: &#39;./www/unpload/&#39;}).any());  \nserver.use(bodyParse.urlencode(({extended: false}));\n******\nbody-parser 解析post数据 application/x-www-form-urlencoded\n用法: \nmulter       解析post文件 multipart/form-data\n\n******\n\nmulter用法如下:\nserver.use(multer().any());         // 任何文件上传\nserver.use(multer().single(&#39;f1&#39;));  // 指定文件上传\n\n--------------------------------------\nserver.post(&#39;/&#39;, function(req, res){\n    console.log(req.files); // 上传文件信息\n});\nserver.use(function(req, res){\n    req.files[0].originalname\n    req.files[0].path\n});\n给文件加上扩展名==》\nvar newName = file.path + pathLib.parse(file.originalname).ext;\n});\n---------------------------------------\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"consolidate-适配模板引擎-ejs、jade\"><a class=\"header-anchor\" href=\"#consolidate-适配模板引擎-ejs、jade\">#</a> consolidate-适配模板引擎(ejs、jade...)</h3>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>const consolidate = require(&#39;consolidate&#39;);\n1.用的哪种模板引擎 2.模板引擎放哪了 3.输入什么东西\n全局配置\nserver.set(&#39;view engine&#39;, &#39;html&#39;);      // 输入什么东西\nserver.set(&#39;views&#39;, &#39;./views&#39;);         // 模板引擎放哪了\nserver.engine(&#39;html&#39;, consolodata.ejs); // 用的哪种模板引擎\n\nserver.get(&#39;/&#39;, function(){\n    if (req.session.userid){            // 登录过\n        res.render(&#39;1.ejs&#39;, {name: &#39;blue&#39;));\n        render()                        // 编译模板\n        send()                          // 直接返回\n    } else {                            // 没有登录\n        res.render(&#39;login.ejs&#39;, {});\n    }\n});\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"node路由\"><a class=\"header-anchor\" href=\"#node路由\">#</a> node路由</h3>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>const express = require(&#39;express&#39;);\nvar server = express();\nvar routeUser = express.Router();\nrouteUser.get(&#39;/1.html&#39;, function(req, res){\n    res.send(&#39;user1&#39;);\n};\nserver.use(&#39;/user&#39;, routerUser);\nserver.listen(8000);\n \n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"数据-数据库\"><a class=\"header-anchor\" href=\"#数据-数据库\">#</a> <em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>数据-数据库</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em></h3>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>关系型:\nMYSQL、Oracle、SQLServer、Access、db2、fox、pro\n\nMySQL:\n免费、中小网站\n优点: 性能非常不错\n确定: 集群、容灾稍微弱一些\n\nOracle:\n挺贵、大型应用、金融级\n优点: 性能非常不错、集群、容灾非常强\n确定: 挺贵\n\n\n文件型:\nsqlite、mongodb\n\n空间型:\n\n==================\nserver端:\n数据存在\n\nclinent端:\n管理工具、Node\n==================\n\n数据基本概念:\n两种单位: \n1.库: 文件夹-用来管理,本身没法存数据\n2.表: 文件  -存数据的\n主键：唯一、性能高、唯一标识符\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"mysql数据库连接\"><a class=\"header-anchor\" href=\"#mysql数据库连接\">#</a> mysql数据库连接</h3>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>const mysql = require(&#39;mysql&#39;);\nvar db = mysql.createConnection({\n    host: &#39;localhost&#39;,\n    user: &#39;root&#39;,\n    password: &#39;123456&#39;,\n    database: &#39;数据库名字&#39;\n});\nconsole.log(db);\n\n2.查询\ndb.query(&#39;mysql查询语句&#39;,function(err, data){\n    console.log(data);\n});\n3.SQL: 查询语句\n1.关键字大写;\n2.库、表、字段需要加上反单引号``;\n\n增: INSERT INTO 表 (字段列表) VALUES(值列表)\n    INSERT INTO user_table (ID, username, password) VALUES(0, &#39;blue&#39;, &#39;123456&#39;);\n删: DELETE FROM 表 WHERE 条件\n改: UPDATE 表 SET 字段=值，字段，。。。 WHERE 条件\n查: SELECT * FROM 表 WHERE 条件\n\n=============================================\n#### 字句!!!: \n\n1.WHERE: 条件\nSHERE name=&#39;blue&#39;\nWHERE age&gt;13\nWHERE age&lt;=18\nWHERE age&gt;=18 AND score&lt;60 (例如:大于18岁小于60分的同学。。。)\nWHERE cach&gt;100 OR score&gt;10000\n\n**********\n\n2.ORDER: 排序--多条件排序\nORDER BY age ASC/DESC  (ASC:升序，DESC:降序)\nORDER BY price EDSC (价格降序排列)\n*价格（price）升序排序，如果价格相同，再按销量（sales）降序排序\nORDER BY price ASC, sales DESC   (中间加逗号，如果前一个没有排序成功就按着后面的条件进行排序)\n\n**********\n\n3.GROUP 聚类-合并相同的 COUNT 、MIN、MAX、AVG\n*统计每个班人数\nID class  name  ---》表结构(student_table)\nCOUNT:计数\nSELECT COUNT(*) FROM student_table; （总计人数）\nSELECT * FROM student_table GROUP BY class;(以班级作为组划分人数 class为班级, 只会打印出来前排的去重班级之后的的几个人)\nSELECT class FROM student_table GROUP BY class;(只会打印出来对应的班级去重重班级之后之后的对应班级号)\nSELECT class,COUNT(class) FROM student_table GROUP BY class;(只会打印出来对应班级相同的次数 class：班级名，COUNT(class): 数字)；\n\n**********\n\nSELECT * FROM student_table;\nSELECT * FROM stuednt_table BY class;\nSELECT class,AVG(score) FROM student_table GROUP BY class;(统计每个班的平均分)\nSELECT class,MAX(score),MIN(score) FROM student_table GROUP BY class;(每个班级的最高、最低分)\nSELECT name,SUM(price) FROM sales_table GROUP BY name ORDER BY SUM(price) DESC;(每个人的消费总额)\n\n4.LINIMT 分页（比如每页20条数据的话）\n第一页: 0，20 \n第二页: 20,20\n第三页: 40,20\n第四页: 60,20\n第n页: (n-1)*20,20\n\n**子句间是用顺序的*:***\nWHERE GROUP ORDER LIMINT\n\nSELECT class,COUNT(class) FROM student_table \nWHERE score&gt;60 \nGROUP BY class \nORDER BY COUNT(class) DESC \nLIMIT 2;(按班级里分数大于60分并且合并班级里大于60的人数，所有班级大于60人数多少进行降序排序，只请求2条数据每页)\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"nodejs微信开发\"><a class=\"header-anchor\" href=\"#nodejs微信开发\">#</a> nodejs微信开发=======</h1>\n<h3 id=\"ngrok-使外界能够访问本地的方法\"><a class=\"header-anchor\" href=\"#ngrok-使外界能够访问本地的方法\">#</a> ngrok 使外界能够访问本地的方法</h3>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>1.ngrok\n2.nodejs 的 localtunnel服务\nnpm install -g localt unnel\nlt --port 8000\n\n3.PageKite 花生壳\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"项目开始start\"><a class=\"header-anchor\" href=\"#项目开始start\">#</a> 项目开始start</h3>\n<h5 id=\"微信订阅号、服务号、企业号的区别：\"><a class=\"header-anchor\" href=\"#微信订阅号、服务号、企业号的区别：\">#</a> 微信订阅号、服务号、企业号的区别：</h5>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/WEB16c29c3c8deaca2f4c45d289ceb31581?method=download&amp;shareKey=e30488846939d7e7765868fc606ccf8b\" alt=\"微信测试号管理\"></p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/WEBc2f4c0e449a1889b0b5b07c03528b26a?method=download&amp;shareKey=dd2d178d3076db2a80b107902b9cded5\" alt=\"微信测试号管理\"></p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>运用koa起服务:\n执行koa时需要在 —-harmony 模式下运行\nnode --harmony app.js\nvar Koa = require(&#39;koa&#39;);\nvar sha1 = require(&#39;sha1&#39;);\nvar config = {\n    wechat: {\n        appId: &#39;wx8d708ba3274d56f4&#39;,\n        appsecret: &#39;611fb2aa0b9ace244c13582337fa75cb&#39;,\n        token: &#39;asdfsdfsdfsdffsfgrgf&#39;\n    }\n};\nvar app = new Koa();\napp.use(function *(next) {\n    console.log(&#39;---&gt;&#39;, this.query);\n    var token = config.wechat.token;\n    var timestamp = this.query.timestamp;\n    var nonce = this.query.nonce;\n    \n    var signature = this.query.signature;\n    var echostr = this.query.echostr;\n    var str = [token, timestamp, nonce].sort().join(&#39;&#39;);\n    var sha = sha1(str);\n    if (sha === signature) {\n        this.body = echostr + &#39;&#39;\n    } else {\n        this.body = &#39;wrong&#39;;\n    }\n});\n\napp.listen(1234);\nconsole.log(&#39;listening: 1234&#39;);\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"localtunnel优缺点\"><a class=\"header-anchor\" href=\"#localtunnel优缺点\">#</a> localtunnel优缺点</h3>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>localtunnel的缺点有:\n1.不支持自定义域名映射\n2.映射以后，一旦本机服务终止，再重启以后，会失去这个映射链接\n\n解决办法:\n    在一台vpn上搭建一个自己的映射代理通道，这个开发难度比较大\n    \n替代方案:\n    1.utralhook的服务：http://www.ultrahook.com/\n    2.下载qq浏览器，在qq浏览器中有配套的解决方案\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}