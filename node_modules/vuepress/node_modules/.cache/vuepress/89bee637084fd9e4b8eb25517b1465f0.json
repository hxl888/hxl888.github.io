{"remainingRequest":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/mypro/history/gitpro/hxl888.github.io/docs/pages/javascript/es6.md?vue&type=template&id=128cd714","dependencies":[{"path":"/Users/mypro/history/gitpro/hxl888.github.io/docs/pages/javascript/es6.md","mtime":1723100283626},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1723084153564},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1723084153564},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/babel-loader/lib/index.js","mtime":1723084153686},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1718962895631},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1723084153564},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vue-loader/lib/index.js","mtime":1718962895631},{"path":"/Users/mypro/history/gitpro/hxl888.github.io/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1723084153489}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"es6\"><a class=\"header-anchor\" href=\"#es6\">#</a> es6</h1>\n<p>1.判断两个值是否相等(es6语法)：</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>Object.is(NAN, NAN); // true\nObject.is(+0, -0 ); // false\n+0 === -0; // true\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>2.es6 ``特殊用法：</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>let a = &#39;哈哈&#39;;\nlet b = &#39;呵呵&#39;;\n let c = func`你说${a}我说${b}！！`;\n func(strings, values) {\n     console.log(strings); // 你说 我说   ！！！\n     console.log(values); // 哈哈 呵呵\n }\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>3.Object.setPrototypeOf  和  <strong>proto</strong></p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>let dinner = {\n    getDrink() {\n        return &#39;喝酒&#39;;\n    }\n};\nlet breakfast = {\n    getDrink() {\n        return &#39;喝水吧还是&#39;;\n    }\n};\nlet sunday = Object.create(dinner);\nconsole.log(Object.getPrototypeOf(sunday) === dinner); // true\nObject.setPrototypeOf(sunday, breakfast);\nconsole.log(Object.getPrototypeOf(sunday) === breakfast) // true\n---------------------\nlet sundays = {\n    __proto__: breakfast\n};\nconsole.log(sundays.getDrink()); // 喝水吧还是\nconsole.log(Object.getPrototypeOf(sundays) === breakfast) // true\n\nsundays.__proto__ = dinner;\nconsole.log(sundays.getDrink()); // 喝酒\nconsole.log(Object.getPrototypeOf(sundays) === dinner) // true\n\n---------------------\nlet sundayss = {\n    __proto__: breakfast,\n    getDrink() {\n        return super.getDrink() + &#39;我是新来的!!&#39;;\n    }\n};\nconsole.log(sundayss.getDrink()); // 喝水吧还是 我是新来的!!\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>4.iterators 迭代器</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>function chef(foods) {\n    let i = 0;\n    return {\n        next() {\n            let done = (i &gt;= foods.length);\n            let value = !done ? foods[i++] : undefined;\n            return {\n                value: value,\n                done: done\n            }\n        }\n    }\n};\nlet examples = chef([&#39;a&#39;, &#39;b&#39;]);\nconsole.log(examples.next()); // value: &#39;a&#39; done: false\nconsole.log(examples.next()); // value: &#39;b&#39; done: false\nconsole.log(examples.next()); // value: undifined done: true\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>5.generators生成器</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>function* chef() {\n    yield &#39;a&#39;\n    yield &#39;b&#39;\n};\nlet chefs = chef();\nconsole.log(chefs.next()); // value: &#39;a&#39; done: false\nconsole.log(chefs.next()); // value: &#39;b&#39; done: false\nconsole.log(chefs.next()); // value: undefined done: true\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>6.class 类</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>class Chef {\n    // 初始化用\n    constructor(food) { \n        this.food = food;\n        this.dish = [];\n    }\n    // 1****\n    get menu() {\n        return this.dish;\n    }\n    set menu(dish) {\n        this.dish.push(dish);\n    }\n    // 2***\n    cook() {\n        console.log(this.food);\n    }\n    \n    // 3****静态方法static\n    static drink(foods) {\n        console.log(foods);\n    }\n};\nlet chefs = new Chef(&#39;苹果&#39;);\nchefs.cook();\nchefs.menu = &#39;橘子&#39;;\nchefs.menu = &#39;香蕉&#39;;\nconsole.log(chefs.menu); // [&quot;橘子&quot;, &quot;香蕉&quot;]\n\n// 调取静态方法不需要实例化方法\nChef.drink(&#39;我不需要new实例化哈哈！！&#39;);\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>7.class 的继承</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>class Person {\n    constructor(name, birthday) {\n        this.name = name;\n        this.birthday = birthday;\n    }\n    intro() {\n        return `${this.name}, ${this.birthday}`;\n    }\n};\n\nclass Chef extends Person {\n    constructor(name, birthday) {\n        super(name, birthday);\n    }\n};\n\nlet example = new Chef(&#39;我啊&#39;, &#39;666&#39;);\nexample.intro(); // &quot;我啊, 666&quot;\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>8.set</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>let desserts = new Set(&#39;abc&#39;);\ndesserts.add(&#39;d&#39;);\nconsole.log(desserts);\n\n// 长度\nconsole.log(desserts.size);\n\n// 判断是否存在\nconsole.log(desserts.has(&#39;a&#39;));\n\n// 删除单个数据\ndesserts.delete(&#39;d&#39;);\nconsole.log(desserts);\n\n// 清空所有数据\ndesserts.clear();\nconsole.log(desserts);\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>9.Map</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>let food = new Map();\nlet fruit = {}, cook = function() {}, dessert = &#39;甜点&#39;;\n\nfood.set(fruit, &#39;香蕉&#39;);\nfood.set(cook, &#39;苹果&#39;);\nfood.set(dessert, &#39;菠萝&#39;);\n\nconsole.log(food);\nconsole.log(food.size);\nconsole.log(food.get(fruit));\nconsole.log(food.get(cook));\nfood.delete(dessert);\nconsole.log(food.has(dessert));\n\nfood.forEach((value, key) =&gt; {\n    console.log(`${key}= ${value}`);\n});\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>10.export 导出的几中方法</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>    function dinner(name) {\n        console.log(name);\n    };\n1. \n    export default function dinner(name) {\n        console.log(name);\n    };\n    \n2. \n    export default dinner;\n    \n3. \n    export {dinner as default}; \n    \n4. \n    export {dinner};\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}